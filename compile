#!/bin/env python
#-*- coding: utf-8 -*-

import py_compile
import glob
import os.path
import subprocess

def gitPull(cmd):
        pull = subprocess.Popen(cmd_pull , stdout=subprocess.PIPE, shell=True)
        return pull.stdout

def compile():
    pwd = './'
    for path,dirs,files in os.walk(pwd):
        dirs[:] = [dir for dir in dirs if dir != "ServerSetup" or "Admin"]
        for file in files:
            if os.path.splitext(file)[1] == ".py":
                fileName = path + "/" + file
                py_compile.compile(fileName)
                print "compile:", file
                
                global compileName
                compileName = fileName.replace(".py",".pyc")
                subprocess.Popen("mv %s ./" %compileName, stdout=subprocess.PIPE, shell=True)
        print "path: %s, dirs: %s, files: %s" %(path,dirs,files)
        
def svnAdd(cmd):
        add = subprocess.Popen(cmd_add , stdout=subprocess.PIPE, shell=True)
        return add.stdout

def svnCommit(cmd):
        commit = subprocess.Popen(cmd_commit , stdout=subprocess.PIPE, shell=True)
        return commit.stdout

# gitHub에서 데이터가져오기
cmd_pull = "git pull"
pull_stdout = gitPull(cmd_pull)
for pull_line in pull_stdout.readlines():
        print pull_line

# 하위폴더 검색 후 컴파일
compile()

# svn에 배포
cmd_add = "svn add *.pyc"
add_stdout = svnAdd(cmd_add)
for add_line in add_stdout.readlines():
        print add_line

# svn commit 적용
cmd_commit = "svn commit -m %s" %compileName
print "커밋메세지: " , cmd_commit
commit_stdout = svnCommit(cmd_commit)
for commit_line in commit_stdout.readlines():
        print commit_line
