#!/bin/env python
#-*- coding: utf-8 -*-

import py_compile
import glob
import os.path
import subprocess

global existpy
existpy = False
global modified
modified = False

def gitPull(cmd):
        pull = subprocess.Popen(cmd_pull , stdout=subprocess.PIPE, shell=True)
        return pull.stdout

def gitStatus(cmd):
        status = subprocess.Popen(cmd_status , stdout=subprocess.PIPE, shell=True)
        return status.stdout

def compile():
    pwd = './'
    for path,dirs,files in os.walk(pwd):
        # 숨김파일 제거
        if ".git" in dirs:
            dirs.remove(".git") 
        if ".svn" in dirs:
            dirs.remove(".svn")

        #탐색하지 않을 폴더
        exceptList = ["ServerSetup", "Admin"]
        dirs[:] = [dir for dir in dirs if dir not in exceptList]

        for file in files:
            if os.path.splitext(file)[1] == ".py":
                fileName = path + "/" + file
                py_compile.compile(fileName)
                print "--COMPILE: ", file
                
                compileName = fileName.replace(".py",".pyc")
                subprocess.Popen("mv %s ./" %compileName, stdout=subprocess.PIPE, shell=True)
                
                # py파일이 있을경우 True
                existpy = True
        #print "path: %s, dirs: %s, files: %s" %(path,dirs,files)
        
def svnAdd(cmd):
        add = subprocess.Popen(cmd_add , stdout=subprocess.PIPE, shell=True)
        return add.stdout

def svnCommit(cmd):
        commit = subprocess.Popen(cmd_commit , stdout=subprocess.PIPE, shell=True)
        return commit.stdout

# gitHub에서 데이터가져오기
cmd_pull = "git pull"
pull_stdout = gitPull(cmd_pull)
for pull_line in pull_stdout.readlines():
        print "<git pull>\n", pull_line
        
# git 상태 보기
cmd_status = "git status"
status_stdout = gitStatus(cmd_status)
for status_line in status_stdout.readlines():
        if status_line == '':
                modified = True

# 하위폴더 검색 후 컴파일
compile()

if existpy:
        # svn에 배포
        cmd_add = "svn add *.pyc"
        add_stdout = svnAdd(cmd_add)
        for add_line in add_stdout.readlines():
                print "<svn add>\n", add_line

        # svn commit 적용
        cmd_commit = "svn commit -m %s" %add_stdout
        #print "커밋메세지: " , cmd_commit
        commit_stdout = svnCommit(cmd_commit)
        for commit_line in commit_stdout.readlines():
                print "<svn commit>\n", commit_line

        # 컴파일한 파일 삭제
        subprocess.Popen("rm -rfv *.pyc" , stdout=subprocess.PIPE, shell=True)


#test01
