#!/bin/env python
#-*- coding: utf-8 -*-

import py_compile
import glob
import os.path
import subprocess

global existUpdt
existUpdt = False
global existNew
existNew = False

def gitPull(cmd):
        pull = subprocess.Popen(cmd_pull , stdout=subprocess.PIPE, shell=True)
        return pull.stdout

def svnStatus(cmd):
        status = subprocess.Popen(cmd_status , stdout=subprocess.PIPE, shell=True)
        return status.stdout

def compile():
    pwd = './'
    for path,dirs,files in os.walk(pwd):
        # 숨김파일 제거
        if ".git" in dirs:
            dirs.remove(".git") 
        if ".svn" in dirs:
            dirs.remove(".svn")

        #탐색하지 않을 폴더
        exceptList = ["ServerSetup", "Admin"]
        dirs[:] = [dir for dir in dirs if dir not in exceptList]

        for file in files:
            if os.path.splitext(file)[1] == ".py":
                fileName = path + "/" + file
                py_compile.compile(fileName)
                print "--COMPILE: ", file
                
                compileName = fileName.replace(".py",".pyc")
                subprocess.Popen("mv %s ./" %compileName, stdout=subprocess.PIPE, shell=True)
                
        #print "path: %s, dirs: %s, files: %s" %(path,dirs,files)
        
def svnAdd(cmd):
        add = subprocess.Popen(cmd_add , stdout=subprocess.PIPE, shell=True)
        return add.stdout

def svnCommit(cmd):
        commit = subprocess.Popen(cmd_commit , stdout=subprocess.PIPE, shell=True)
        return commit.stdout


# gitHub에서 데이터가져오기
cmd_pull = "git pull"
pull_stdout = gitPull(cmd_pull)
for pull_line in pull_stdout.readlines():
        print pull_line
        pull = pull_line.split(' ')
        print "----------git pull------------"   ###########
        print pull  ###########
        if pull[0] == 'Updating':
                print "-----------search Updating(pull[0])------------"  ###########
                print pull[0] ############
                existUpdt = True
                break
        else:
                print "변경된 사항이 없습니다."
     
if existUpdt:
        # 하위폴더 검색 후 컴파일
        print "----------compiling------------"
        compile()
        
        # svn 상태 보기
        cmd_status = "svn status"
        status_stdout = svnStatus(cmd_status)
        print "------------svn status--------------"  ##############
        for status_line in status_stdout.readlines():
                stat = status_line.split(' ')
                print "stat: ", stat ##############
                if stat[0] == 'M':
                        print "-----------search 'Modified'(stat[0])-------------"  ###########
                        print stat[0] ##############
                        
                        # svn commit 적용
                        cmd_commit = "svn commit -m %s modified" %status_stdout
                        commit_stdout = svnCommit(cmd_commit)
                        print "------------svn commit Modified-------------" ##################
                        for commit_line in commit_stdout.readlines():
                                print commit_line
                        break
                else:
                        print '------------Not Modified-------------' ##############
                        existNew = True

if existNew:
        # svn에 배포
        cmd_add = "svn add *.pyc"
        add_stdout = svnAdd(cmd_add)
        print "-------------svn add New-------------" ################
        for add_line in add_stdout.readlines():
                print add_line
        
        # svn commit 적용
        cmd_commit = "svn commit -m %s" %add_stdout
        commit_stdout = svnCommit(cmd_commit)
        print "---------------svn commit New---------------" #############
        for commit_line in commit_stdout.readlines():
                print commit_line


# 컴파일한 파일 삭제
subprocess.Popen("rm -rfv *.pyc" , stdout=subprocess.PIPE, shell=True)

